{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","background","padding","borderBottom","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteTodo","btnStyle","Component","color","borderRadius","border","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","About","Fragment","App","filter","newTodo","uuidv4","console","log","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d497e0dd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\r\n      background: \"#f4f4f4\",\r\n      padding: \"10px\",\r\n      borderBottom: \"1px #ccc dotted\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <h5>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{' '}\r\n          {title}\r\n          <button\r\n            onClick={this.props.deleteTodo.bind(this, id)}\r\n            style={btnStyle}\r\n          >\r\n            x\r\n          </button>{\" \"}\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  padding: \"5px 10px\",\r\n  borderRadius: \"5px\",\r\n  border: \"none\",\r\n  float: \"right\",\r\n};\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        markComplete={this.props.markComplete}\r\n        deleteTodo={this.props.deleteTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header(){\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to =\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle={\r\n  background:\"#333\",\r\n  color:\"#fff\",\r\n  textAlign:\"center\",\r\n  padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color:\"#ffffff\",\r\n    textDecoration:'none',\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) =>{\r\n      e.preventDefault();\r\n      this.props.addTodo(this.state.title);\r\n      this.setState({title: ''})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo...\"\r\n          style={{ flex: \"10\", padding: \"5px\", border:\"none\" }}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn\"\r\n          style={{ flex: \"1\" }}\r\n        ></input>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>\r\n                About\r\n            </h1>\r\n            <p>\r\n                This is the TodoList app v1.0.0.\r\n            </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { Component } from \"react\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (id === todo.id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  deleteTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuidv4(),\n      title: title,\n      completed: false,\n    };\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n    });\n  };\n\n  state = {\n    todos: [\n      {\n        id: uuidv4(),\n        title: \"Take out the trash.\",\n        completed: false,\n      },\n      {\n        id: uuidv4(),\n        title: \"Make your bed.\",\n        completed: false,\n      },\n      {\n        id: uuidv4(),\n        title: \"Dinner with family.\",\n        completed: false,\n      },\n      {\n        id: uuidv4(),\n        title: \"Complete pending work.\",\n        completed: false,\n      },\n    ],\n  };\n\n  render() {\n    console.log(this.state.todos);\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              exact path=\"/Todo_app_react\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    deleteTodo={this.deleteTodo}\n                  />\n                </React.Fragment>\n              )}\n            ></Route>\n            <Route path=\"/about\" component={About}></Route>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}